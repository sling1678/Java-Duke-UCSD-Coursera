
public class CaesarCipher {
	// use the default constructor
	// we need to write the encrypt and decrypt functions 
	
	/**
	 * Write the method encrypt that has two parameters, 
	 * a String named input and an int named key. This method 
	 * returns a String that has been encrypted using the Caesar 
	 * Cipher algorithm explained in the videos. 
	 * Assume that all the alphabetic characters are uppercase letters. 
	 * For example, the call 
	 * encrypt(“FIRST LEGION ATTACK EAST FLANK!”, 23)
	 * should return the string 
	 * “CFOPQ IBDFLK XQQXZH BXPQ CIXKH!”
	 * @param args
	 */
	
	public String encrypt(String message, int key){
	StringBuffer encryptedMessage = new StringBuffer(); //use StrignBuffer to store local mutable strings.
	String alphabets ="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	String shiftedAlphabets;
	
	int key26;
	if (key < 0){
		throw new IllegalArgumentException("Key " + key + " should be >=0.");
	} else {
		key26 = key % 26; //if key is more than 26, just wrap around.
		shiftedAlphabets = alphabets.substring(key26) + alphabets.substring(0,key26);
	}
	System.out.println(alphabets);
	System.out.println(shiftedAlphabets);
	
	char testChar;
	int index;
	for(int i = 0; i< message.length(); i++){
		testChar = message.charAt(i);
		index = alphabets.indexOf(testChar); //Note: if the char is not in the alphabets it will be -1
		if (index >= 0) //found 
		{
			encryptedMessage.append(shiftedAlphabets.charAt(index));
		} else {
			encryptedMessage.append(testChar);
		}
		
	}
		
	return encryptedMessage.toString();
	}
	
	
	
	
	
	public static void main(String[] args) { //this is the tester function for me.
		// TODO Auto-generated method stub
		CaesarCipher cs = new CaesarCipher();
		System.out.println(cs.encrypt("FIRST LEGION ATTACK EAST FLANK!", 23).toString());
	}

}
