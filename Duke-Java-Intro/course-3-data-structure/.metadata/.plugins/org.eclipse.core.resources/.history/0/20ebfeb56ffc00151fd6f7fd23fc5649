/**
 * Assignment:
 * Create the TestCaesarCipher class with the following parts:
 * Include the methods countLetters and maxIndex that you wrote in the previous lesson.
 * Write the void method simpleTests that has no parameters. 
 * This method should read in a file as a String, create a CaesarCipher object with key 18, 
 * encrypt the String read in using the CaesarCipher object, print the encrypted String, 
 * and decrypt the encrypted String using the decrypt method. 
 * Write the method breakCaesarCipher that has one String parameter named input. 
 * This method should figure out which key was used to encrypt this message 
 * (in a similar manner as the previous lesson), then create a CaesarCipher object 
 * with that key and decrypt the message.In the simpleTests method, add a call 
 * to breakCaesarCipher on the encrypted String to decrypt it automatically by 
 * determining the key, and print the decrypted String.
 * @author sling
 *
 */
public class TestCaesarCipherOOP {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		CaesarCipherOOP ccOOP = new CaesarCipherOOP(2);
		String message = "Hey You, cheer up.";
		String encrypted = ccOOP.encrypt(message);
		System.out.println("encypted message is " + encrypted);
		System.out.println("Original message is " + ccOOP.decrypt(encrypted));
		int keyGuess = breakCaesarCipher(encrypted);
	}
	
	
	public int breakCaesarCipher(String input){
		int keyGuessed = 0; // We will guess the key by assuming the most common letter is E
		// count either case of each letter in the input
		int [] counts = new int[26]; // 0 to 25 for the 26 letters; initialized to zero automatically
		String alphabets = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		int indexUpper;
		int indexLower;
		int index = 0;
		for (int i = 0; i < input.length(); i++){
			indexUpper = alphabets.indexOf(input.charAt(i)); // value = -1 if not here
			indexLower = alphabets.toLowerCase().indexOf(input.charAt(i)); // value = -1 if not here
			if (indexUpper >= 0 || indexLower >= 0 ) index = indexUpper + indexLower + 1;
			++counts[index];
		}// end of for
		int max = 0;
		int indexOfMax = 0;
		for (int i = 0; i < counts.length; i++){
			if (max < counts[i]) {
				max = counts[i];
				indexOfMax = i;
			}
		}
		return keyGuessed = indexOfMax - 4;
	}
	
	
	
	
	

}
